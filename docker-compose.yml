# D√©but de la section o√π sont list√©s tous les services (conteneurs) que compose votre infrastructure.
services:

  # üîµ Service PostgreSQL ‚Äî Base de donn√©es relationnelle
  postgres:
    image: postgres:15  # Image officielle PostgreSQL version 15
    container_name: infra-postgres  # Nom du conteneur dans Docker
    restart: always  # Red√©marre automatiquement si le conteneur s'arr√™te
    environment:
      POSTGRES_USER: ${POSTGRES_USER}  # Nom d'utilisateur d√©fini dans .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Mot de passe d√©fini dans .env
      #POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Sauvegarde des donn√©es sur le disque
    ports:
      - "5432:5432"  # Port d'√©coute par d√©faut de PostgreSQL
    networks:
      - infra-net

  # üü¢ Service pgAdmin ‚Äî Interface web pour g√©rer PostgreSQL plus facilement, comme phpMyAdmin pour MySQL.
  pgadmin:
    image: dpage/pgadmin4  # Image officielle de pgAdmin
    container_name: infra-pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}  # Email admin
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}  # Mot de passe admin
    ports:
      - "5050:80"  # Acc√®s √† l'interface pgAdmin via http://localhost:5050
    depends_on:
      - postgres  # Attente que PostgreSQL soit pr√™t
    networks:
      - infra-net

  # üü° Service Odoo ‚Äî ERP complet
  odoo:
    image: odoo:18
    container_name: infra-odoo
    depends_on:
      - postgres
    environment:
      - HOST=postgres
      - USER=${POSTGRES_USER}
      - PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "8069:8069"  # Interface web Odoo http://localhost:8069
    volumes:
      - odoo_addons:/mnt/extra-addons
      - odoo_data:/var/lib/odoo
      - ./odoo/odoo.conf:/etc/odoo/odoo.conf  # ‚Üê on monte le fichier de config
    command: ["odoo", "-c", "/etc/odoo/odoo.conf"]  # ‚Üê on le force au d√©marrage
    networks:
      - infra-net

  # üìß MailDev ‚Äî Outil de test SMTP
  maildev:
    image: maildev/maildev
    container_name: infra-maildev
    ports:
      - "1080:1080"  # Interface web pour voir les mails envoy√©s
      - "1025:1025"  # Port SMTP d'envoi
    networks:
      - infra-net

  # üî¥ Redis ‚Äî Syst√®me de cache en m√©moire rapide
  redis:
    image: redis:alpine
    container_name: infra-redis
    restart: always
    ports:
      - "6379:6379"  # Port d‚Äôacc√®s Redis
    networks:
      - infra-net

  # üß© Adminer ‚Äî Interface l√©g√®re de gestion de bases de donn√©es
  adminer:
    image: adminer
    container_name: infra-adminer
    restart: always
    ports:
      - "8080:8080"  # Acc√®s via http://localhost:8080
    networks:
      - infra-net

  # üñ•Ô∏è Portainer ‚Äî Gestion des conteneurs via une interface web
  portainer:
    image: portainer/portainer-ce
    container_name: infra-portainer
    restart: always
    ports:
      - "9000:9000"  # Interface Portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # N√©cessaire pour contr√¥ler Docker
      - portainer_data:/data
    networks:
      - infra-net

  # üìÇ MinIO ‚Äî Stockage objet compatible S3
  minio:
    image: minio/minio:RELEASE.2024-05-28T17-19-04Z
    container_name: infra-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - "9001:9001"  # Interface d‚Äôadministration
      - "9002:9000"  # API S3 compatible
    volumes:
      - minio_data:/data
    networks:
      - infra-net

  # Client MinIO pour cr√©er le bucket automatiquement
  minio-client:
      image: minio/mc:latest
      container_name: infra-minio-client
      depends_on:
          - minio
      entrypoint: >
          /bin/sh -c "
          sleep 15;
          /usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin123;
          /usr/bin/mc mb minio/infra-bucket --ignore-existing;
          /usr/bin/mc policy set public minio/infra-bucket;
          /usr/bin/mc anonymous set public minio/infra-bucket;
          echo 'Bucket policy applied successfully';
          exit 0;
          "
      networks:
          - infra-net
      restart:
          always

  # üîç Elasticsearch ‚Äî Moteur de recherche et d‚Äôanalyse
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: infra-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # D√©sactive la s√©curit√© (dev uniquement)
    ports:
      - "9200:9200"  # Port d‚ÄôAPI Elasticsearch
    networks:
      - infra-net

  # üìä Kibana ‚Äî Interface d‚Äôexploration des donn√©es Elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: infra-kibana
    ports:
      - "5601:5601"  # Interface Web
    environment:
      ELASTICSEARCH_HOSTS: "http://infra-elasticsearch:9200"
    depends_on:
      - elasticsearch
    networks:
      - infra-net

  # ‚úâÔ∏è RabbitMQ ‚Äî Syst√®me de messagerie asynchrone
  rabbitmq:
    image: rabbitmq:3-management  # Interface web incluse (port 15672)
    container_name: infra-rabbitmq
    ports:
      - "5672:5672"   # Protocole AMQP (pour que les services communiquent)
      - "15672:15672" # Interface Web http://localhost:15672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - infra-net

  # üîÅ Service Traefik ‚Äî Reverse Proxy dynamique avec HTTPS Let's Encrypt
  traefik:
    image: traefik:v2.11
    container_name: infra-traefik
    restart: always
    command:
      - --api.dashboard=true                          # Active l'interface web du dashboard Traefik
      - --providers.docker=true                       # Active le provider Docker (traefik lit les conteneurs)
      - --providers.docker.exposedByDefault=false    # N'expose que les conteneurs ayant le label traefik.enable=true
      - --entrypoints.web.address=:80                # Entr√©e HTTP
      - --entrypoints.websecure.address=:443         # Entr√©e HTTPS
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=admin@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"      # HTTP public
      - "443:443"    # HTTPS public
      - "8088:8080"  # Dashboard Traefik via http://localhost:8088/dashboard/
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock    # N√©cessaire pour d√©tecter automatiquement les conteneurs
      - ./traefik:/etc/traefik                        # Contient les fichiers traefik.yml et dynamic_conf.yml
      - traefik_letsencrypt:/letsencrypt     # Stockage persistant des certificats Let's Encrypt
    networks:
      - infra-net


# üåê R√©seau utilis√© pour connecter tous les conteneurs entre eux
networks:
  infra-net:
    driver: bridge

# üíæ D√©finition des volumes pour persister les donn√©es
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker/volumes/postgres_data
      o: bind
  odoo_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker/volumes/odoo_data
      o: bind
  odoo_addons:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker/volumes/odoo_addons
      o: bind
  portainer_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker/volumes/portainer_data
      o: bind
  minio_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker/volumes/minio_data
      o: bind
  traefik_letsencrypt:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker/volumes/traefik_letsencrypt
      o: bind
